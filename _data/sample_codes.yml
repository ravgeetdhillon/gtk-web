codes:
  - name: C
    ext: c
    snippet: |
      ```cpp
      // Include gtk
      #include <gtk/gtk.h>

      static void on_activate (GtkApplication *app) {
        // Create a new window
        GtkWidget *window = gtk_application_window_new (app);
        // Create a new button
        GtkWidget *button = gtk_button_new_with_label ("Hello, World!");
        // When the button is clicked, close the window passed as an argument
        g_signal_connect_swapped (button, "clicked", G_CALLBACK (gtk_window_close), window);
        gtk_window_set_child (GTK_WINDOW (window), button);
        gtk_window_present (window);
      }

      int main (int argc, char *argv[]) {
        // Create a new application
        GtkApplication *app = gtk_application_new ("com.example.GtkApplication",
                                                   G_APPLICATION_FLAGS_NONE);
        g_signal_connect (app, "activate", G_CALLBACK (on_activate), NULL);
        return g_application_run (G_APPLICATION (app), argc, argv);
      }
      ```
  - name: JavaScript
    ext: javascript
    snippet: |
      ```javascript
      imports.gi.versions['Gtk'] = '4.0';
      const Gtk = imports.gi.Gtk;

      // Create a new application
      let app = new Gtk.Application({ application_id: 'com.example.GtkApplication' });

      // When the application is launched…
      app.connect('activate', () => {
          // … create a new window …
          let win = new Gtk.ApplicationWindow({ application: app });
          // … with a button in it …
          let btn = new Gtk.Button({ label: 'Hello, World!' });
          // … which closes the window when clicked
          btn.connect('clicked', () => { win.close(); });
          win.set_child(btn);
          win.present();
      });

      // Run the application
      app.run([]);
      ```
  - name: Perl
    ext: pl
    snippet: |
      ```perl
      #!/usr/bin/env perl
      use strict; use warnings; use utf8;
      use Glib::IO;
      use Gtk4;

      # Create a new application
      my $app =
        Gtk3::Application->new('com.example.Gtk3Application', 'G_APPLICATION_FLAGS_NONE');

      # When the application is launched…
      $app->signal_connect(
        activate => sub {
          my $app = shift;
          # … create a new window …
          my $win = Gtk3::ApplicationWindow->new($app);
          # … with a button in it …
          my $btn = Gtk3::Button->new('Hello World!');
          # … which closes the window when clicked
          $btn->signal_connect(clicked => sub { $win->close(); });
          $win->set_child($btn);
          $win->present();
        }
      );

      # Run the application
      $app->run(\@ARGV);
      ```
  - name: Python
    ext: py
    snippet: |
      ```python
      # Load Gtk
      import gi
      gi.require_version('Gtk', '4.0')
      from gi.repository import Gtk

      # When the application is launched…
      def on_activate(app):
          # … create a new window…
          win = Gtk.ApplicationWindow(application=app)
          # … with a button in it…
          btn = Gtk.Button(label='Hello, World!')
          # … which closes the window when clicked
          btn.connect('clicked', lambda x: win.close())
          win.set_child(btn)
          win.present()

      # Create a new application
      app = Gtk.Application(application_id='com.example.GtkApplication')
      app.connect('activate', on_activate)

      # Run the application
      app.run(None)
      ```
  - name: Rust
    ext: rs
    snippet: |
      ```rust
      use gio::prelude::*;
      use glib::clone;
      use gtk::prelude::*;

      // When the application is launched…
      fn on_activate(application: &gtk::Application) {
          // … create a new window …
          let window = gtk::ApplicationWindow::new(application);
          // … with a button in it …
          let button = gtk::Button::new_with_label("Hello World!");
          // … which closes the window when clicked
          button.connect_clicked(clone!(@weak window => move |_| window.close()));
          window.set_child(&button);
          window.present();
      }

      fn main() {
          // Create a new application
          let app = gtk::Application::new(Some("com.github.gtk-rs.examples.basic"), Default::default())
              .expect("Initialization failed...");
          app.connect_activate(|app| on_activate(app));
          // Run the application
          app.run(&std::env::args().collect::<Vec<_>>());
      }
      ```
  - name: Vala
    ext: vala
    snippet: |
      ```vala
      int main (string[] argv) {
          // Create a new application
          var app = new Gtk.Application ("com.example.GtkApplication",
                                         GLib.ApplicationFlags.FLAGS_NONE);

          app.activate.connect (() => {
              // Create a new window
              var window = new Gtk.ApplicationWindow (app);

              // Create a new button
              var button = new Gtk.Button.with_label ("Hello, World!");

              // When the button is clicked, close the window
              button.clicked.connect (() => {
                  window.close ();
              });

              window.set_child (button);
              window.present ();
          });

          return app.run (argv);
      }
      ```
